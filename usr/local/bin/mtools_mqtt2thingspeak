#!/usr/bin/python

import paho.mqtt.client as mqtt
from datetime import datetime
import requests
import pytz
import json

def iso_format(dt):
    """ return an ISO string (at zulu time) from a datetime object

    :param dt: a datetime object (naive or not)
    :type dt: datetime
    :return: datetime as ISO string
    :rtype: str
    """
    # naive is UTC other is convert to UTC
    if dt.tzinfo is None:
        dt = pytz.utc.localize(dt)
    else:
        dt = dt.astimezone(pytz.utc)
    # convert dt to isostring at zero meridian time
    isostring = datetime.strftime(dt, '%Y-%m-%dT%H:%M:%S.{0}Z')
    return isostring.format(int(round(dt.microsecond/1000.0)))

def update_thingspeak(params):
    r = requests.post('https://api.thingspeak.com/update', data=params)
    return ((r.status_code == 200) and (int(r.text) != 0))

def on_connect(mqttc, obj, flags, rc):
    print("connect ok [rc: "+str(rc)+"]")

def on_message(mqttc, obj, msg):
    # garden atmo pressure (normalize sea level)
    if msg.topic == "pub/house/garden/temperature":
        try:
            json_data = json.loads(msg.payload)
            value = float(json_data['value'])
            iso_dt = str(json_data['update'])
        except:
            value = None
        # upload value
        update_thingspeak({'api_key': '<MY_KEY_HERE>', 'created_at': iso_dt, 'field1': value})

def on_publish(mqttc, obj, mid):
    print("mid: "+str(mid))

#def on_subscribe(mqttc, obj, mid, granted_qos):
#    print("Subscribed: "+str(mid)+" "+str(granted_qos))

#def on_log(mqttc, obj, level, string):
#    print(string)

mqttc = mqtt.Client()
mqttc.on_message = on_message
mqttc.on_connect = on_connect
mqttc.on_publish = on_publish
#mqttc.on_subscribe = on_subscribe
mqttc.connect("localhost", 1883, 60)
# subscribes
mqttc.subscribe("pub/house/garden/temperature", 0)
mqttc.subscribe("pub/house/garden/pressure_sea_level", 0)

mqttc.loop_forever()

