#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
from datetime import datetime
import json
from ConfigParser import ConfigParser
import paho.mqtt.client as mqtt
import requests
import pytz

# read config
cnf = ConfigParser()
cnf.read(os.path.expanduser('~/.mtools_config'))
api_key_t_wam = cnf.get('thingspeak', 'api_key_t_wam')

# global vars
pressure_sea = None
temperature = None

def iso_format(dt):
    """ return an ISO string (at zulu time) from a datetime object

    :param dt: a datetime object (naive or not)
    :type dt: datetime
    :return: datetime as ISO string
    :rtype: str
    """
    # naive is UTC other is convert to UTC
    if dt.tzinfo is None:
        dt = pytz.utc.localize(dt)
    else:
        dt = dt.astimezone(pytz.utc)
    # convert dt to isostring at zero meridian time
    isostring = datetime.strftime(dt, '%Y-%m-%dT%H:%M:%S.{0}Z')
    return isostring.format(int(round(dt.microsecond/1000.0)))

def update_thingspeak(params):
    """ upload data to thingspeak platform

    :param params: params for update like: api_key (mandatory), field1...
    :type params: dict
    :return: True if update is a success, False otherwise
    :rtype: bool
    """
    req_try = 3
    is_ok = False
    while True:
        if req_try <= 0:
            break
        else:
            req_try -= 1
        try:
            r = requests.post('https://api.thingspeak.com/update', data=params, timeout=5.0)
            print("request: send data [%s]" % params)
        except requests.exceptions.RequestException as e:
            print("request: error with data [%s]" % params)
            pass
        else:
            is_ok = ((r.status_code == 200) and (int(r.text) != 0))
            print("is_ok: %s" % is_ok)
            break
    return is_ok

def on_connect(mqttc, obj, flags, rc):
    # log connect to broker
    print("connect ok [rc: "+str(rc)+"]")
    # subscribes
    mqttc.subscribe("pub/house/#", 0)

def on_message(mqttc, obj, msg):
    global pressure_sea, temperature

    if msg.topic == "pub/house/garden/temperature":
        try:
            json_data = json.loads(msg.payload)
            temperature = float(json_data['value'])
            iso_dt = str(json_data['update'])
        except:
            temperature = None
        # upload value
        update_thingspeak({'api_key': api_key_t_wam, 'created_at': iso_dt, 'field1': temperature, 'field2': pressure_sea})

    if msg.topic == "pub/house/garden/pressure_sea_level":
        try:
            json_data = json.loads(msg.payload)
            pressure_sea = float(json_data['value'])
            iso_dt = str(json_data['update'])
        except:
            pressure_sea = None


mqttc = mqtt.Client()
mqttc.on_message = on_message
mqttc.on_connect = on_connect
mqttc.connect("localhost", 1883, 60)

mqttc.loop_forever()
